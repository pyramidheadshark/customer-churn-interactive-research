import streamlit as st
import pandas as pd
import numpy as np
import joblib
import tempfile
import shap
import plotly.express as px
import plotly.figure_factory as ff
import matplotlib.pyplot as plt
import os

st.set_page_config(layout="wide", page_title="–î–µ—à–±–æ—Ä–¥ –ê–Ω–∞–ª–∏–∑–∞ –û—Ç—Ç–æ–∫–∞")

BASE_DIR = '.'
DATA_DIR = os.path.join(BASE_DIR, 'data', 'processed')
ORIGINAL_DATA_PATH = os.path.join(BASE_DIR, 'data', 'raw', 'Churn_Modelling.csv')
MODEL_PATH = os.path.join(BASE_DIR, 'models', 'lgbm_churn_model.joblib')

X_TRAIN_PATH = os.path.join(DATA_DIR, 'X_train_processed.csv')
X_TEST_PATH = os.path.join(DATA_DIR, 'X_test_processed.csv')
Y_TRAIN_PATH = os.path.join(DATA_DIR, 'y_train.csv')
Y_TEST_PATH = os.path.join(DATA_DIR, 'y_test.csv')


@st.cache_data
def load_processed_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—É—á–∞—é—â–∏–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        X_train = pd.read_csv(X_TRAIN_PATH)
        X_test = pd.read_csv(X_TEST_PATH)
        y_train = pd.read_csv(Y_TRAIN_PATH).squeeze('columns')
        y_test = pd.read_csv(Y_TEST_PATH).squeeze('columns')

        if isinstance(y_train, pd.DataFrame): y_train = y_train[y_train.columns[0]]
        if isinstance(y_test, pd.DataFrame): y_test = y_test[y_test.columns[0]]
        return X_train, X_test, y_train, y_test
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")
        return None, None, None, None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None, None

@st.cache_data
def load_original_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ, –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è EDA."""
    try:
        df_original = pd.read_csv(ORIGINAL_DATA_PATH)
        df_original = df_original.drop(columns=['RowNumber', 'CustomerId', 'Surname', 'HasCrCard'], errors='ignore')
        return df_original
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")
        return None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

@st.cache_resource
def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å LightGBM."""
    try:
        model = joblib.load(MODEL_PATH)
        return model
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏ '{MODEL_PATH}'.")
        return None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

@st.cache_resource
def get_explainer(_model, _X_train):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç SHAP explainer –¥–ª—è –º–æ–¥–µ–ª–∏."""
    if _model is None or _X_train is None:
        return None
    try:
        explainer = shap.TreeExplainer(_model)
        return explainer
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SHAP explainer: {e}")
        return None

@st.cache_data
def calculate_shap_values(_explainer, _X_test):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è SHAP –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞."""
    if _explainer is None or _X_test is None:
        return None, None
    try:
        st.info("–†–∞—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π SHAP –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
        shap_values_output = _explainer.shap_values(_X_test)

        if isinstance(shap_values_output, list) and len(shap_values_output) == 2:
            shap_values_class1 = shap_values_output[1]
        else:
             shap_values_class1 = shap_values_output

        expected_value = _explainer.expected_value
        if isinstance(expected_value, list) or isinstance(expected_value, np.ndarray):
             base_value = expected_value[1]
        else:
             base_value = expected_value

        st.success("–ó–Ω–∞—á–µ–Ω–∏—è SHAP —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")
        return shap_values_class1, base_value
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π SHAP: {e}")
        return None, None

X_train, X_test, y_train, y_test = load_processed_data()
df_original = load_original_data()
model = load_model()

if X_train is not None and X_test is not None and y_test is not None and model is not None:
    explainer = get_explainer(model, X_train)
    shap_values, base_value = calculate_shap_values(explainer, X_test)

    st.title("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –î–µ—à–±–æ—Ä–¥ –ê–Ω–∞–ª–∏–∑–∞ –û—Ç—Ç–æ–∫–∞ –ö–ª–∏–µ–Ω—Ç–æ–≤")
    st.markdown("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–Ω–∫–∞, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ LightGBM –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ SHAP.")

    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä **–û–±–∑–æ—Ä –ú–æ–¥–µ–ª–∏**",
        "üåç **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è**",
        "üë§ **–ê–Ω–∞–ª–∏–∑ –ö–ª–∏–µ–Ω—Ç–∞**",
        "üî¨ **EDA**"
    ])

    with tab1:
        st.header("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ú–æ–¥–µ–ª–∏ LightGBM (–Ω–∞ –¢–µ—Å—Ç–æ–≤—ã—Ö –î–∞–Ω–Ω—ã—Ö)")

        if y_test is not None:
            col1, col2, col3 = st.columns(3)
            try:
                y_pred_proba = model.predict_proba(X_test)[:, 1]
                y_pred = model.predict(X_test)

                from sklearn.metrics import roc_auc_score, average_precision_score, f1_score, recall_score, precision_score, confusion_matrix

                roc_auc = roc_auc_score(y_test, y_pred_proba)
                pr_auc = average_precision_score(y_test, y_pred_proba)
                f1 = f1_score(y_test, y_pred)
                recall = recall_score(y_test, y_pred)
                precision = precision_score(y_test, y_pred)

                col1.metric("ROC AUC", f"{roc_auc:.3f}", help="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç—Ç–æ–∫–∞.")
                col1.metric("PR AUC", f"{pr_auc:.3f}", help="–ü–ª–æ—â–∞–¥—å –ø–æ–¥ –∫—Ä–∏–≤–æ–π Precision-Recall, –≤–∞–∂–Ω–∞ –ø—Ä–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ.")
                col2.metric("F1 Score (–ö–ª–∞—Å—Å 1)", f"{f1:.3f}", help="–ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ Precision –∏ Recall –¥–ª—è –∫–ª–∞—Å—Å–∞ –û—Ç—Ç–æ–∫.")
                col2.metric("Recall (–ö–ª–∞—Å—Å 1)", f"{recall:.3f}", help="–î–æ–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç—Ç–æ—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞.")
                col3.metric("Precision (–ö–ª–∞—Å—Å 1)", f"{precision:.3f}", help="–î–æ–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ—Ç—Ç–æ—á–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—à–ª–∏.")
                col3.metric("Accuracy", f"{model.score(X_test, y_test):.3f}", help="–û–±—â–∞—è –¥–æ–ª—è –≤–µ—Ä–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–º–µ–Ω–µ–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞ –ø—Ä–∏ –¥–∏—Å–±–∞–ª–∞–Ω—Å–µ).")


                st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –û—à–∏–±–æ–∫ (Confusion Matrix)")
                cm = confusion_matrix(y_test, y_pred)
                cm_labels = ['–õ–æ—è–ª–µ–Ω (0)', '–û—Ç—Ç–æ–∫ (1)']
                fig_cm = ff.create_annotated_heatmap(
                    z=cm, x=cm_labels, y=cm_labels, colorscale='Blues',
                    annotation_text=[[str(y) for y in x] for x in cm]
                )
                fig_cm.update_layout(
                    xaxis_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å",
                    yaxis_title="–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å"
                )
                st.plotly_chart(fig_cm, use_container_width=True)

            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: {e}")
        else:
            st.warning("–¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ (y_test) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏.")

    with tab2:
        st.header("üåç –ö–∞–∫–∏–µ –§–∞–∫—Ç–æ—Ä—ã –í–ª–∏—è—é—Ç –Ω–∞ –û—Ç—Ç–æ–∫ –≤ –¶–µ–ª–æ–º?")
        if shap_values is not None and not X_test.empty:
            try:
                plt.style.use('default')

                st.subheader("–°—Ä–µ–¥–Ω—è—è –í–∞–∂–Ω–æ—Å—Ç—å –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ (SHAP Bar Plot)")
                fig_bar, ax_bar = plt.subplots()
                shap.summary_plot(shap_values, X_test, plot_type='bar', show=False)
                st.pyplot(fig_bar)
                plt.close(fig_bar)
                st.caption("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º.")


                st.subheader("–í–ª–∏—è–Ω–∏–µ –ó–Ω–∞—á–µ–Ω–∏–π –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ (SHAP Dot Plot)")
                fig_dot, ax_dot = plt.subplots()
                shap.summary_plot(shap_values, X_test, show=False)
                st.pyplot(fig_dot)
                plt.close(fig_dot)
                st.caption("""
                    –ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ - –≤–ª–∏—è–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
                    *   **–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏:** –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞ (–≤–ø—Ä–∞–≤–æ - –ø–æ–≤—ã—à–∞–µ—Ç, –≤–ª–µ–≤–æ - –ø–æ–Ω–∏–∂–∞–µ—Ç).
                    *   **–¶–≤–µ—Ç —Ç–æ—á–∫–∏:** –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ (–∫—Ä–∞—Å–Ω—ã–π - –≤—ã—Å–æ–∫–æ–µ, —Å–∏–Ω–∏–π - –Ω–∏–∑–∫–æ–µ).
                    –ü—Ä–∏–∑–Ω–∞–∫–∏ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑.
                """)

                st.subheader("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –ó–Ω–∞—á–µ–Ω–∏—è –ü—Ä–∏–∑–Ω–∞–∫–∞")
                feature_options = X_test.columns.tolist()
                selected_feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:", feature_options, index=feature_options.index('Age') if 'Age' in feature_options else 0)

                if selected_feature:
                    fig_dep, ax_dep = plt.subplots()
                    shap.dependence_plot(selected_feature, shap_values, X_test, interaction_index="auto", show=False, ax=ax_dep)
                    st.pyplot(fig_dep)
                    plt.close(fig_dep)
                    st.caption(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–µ–Ω—è–µ—Ç—Å—è –≤–∫–ª–∞–¥ –ø—Ä–∏–∑–Ω–∞–∫–∞ '{selected_feature}' –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. –¶–≤–µ—Ç —Ç–æ—á–µ–∫ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º.")

            except ImportError:
                 st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ matplotlib —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è SHAP –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
            except Exception as e:
                 st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å SHAP –≥—Ä–∞—Ñ–∏–∫–∏: {e}")

        else:
            st.warning("SHAP –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

    with tab3:
        st.header("üë§ –ü–æ—á–µ–º—É –ú–æ–¥–µ–ª—å –ü—Ä–∏–Ω—è–ª–∞ –¢–∞–∫–æ–µ –†–µ—à–µ–Ω–∏–µ –ø–æ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ö–ª–∏–µ–Ω—Ç—É?")

        if shap_values is not None and base_value is not None and not X_test.empty and y_test is not None and explainer is not None:
            max_index = len(X_test) - 1
            customer_index = st.number_input(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (–æ—Ç 0 –¥–æ {max_index}):",
                min_value=0, max_value=max_index, value=0, step=1
            )

            if customer_index is not None and 0 <= customer_index <= max_index:
                st.subheader(f"–ê–Ω–∞–ª–∏–∑ –¥–ª—è –ö–ª–∏–µ–Ω—Ç–∞ —Å –ò–Ω–¥–µ–∫—Å–æ–º {customer_index}")

                col1, col2 = st.columns(2)
                with col1:
                    st.write("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:**")
                    st.dataframe(X_test.iloc[[customer_index]].T.rename(columns={customer_index: '–ó–Ω–∞—á–µ–Ω–∏–µ'}))
                with col2:
                    actual_status = "–û—Ç—Ç–æ–∫" if y_test.iloc[customer_index] == 1 else "–õ–æ—è–ª–µ–Ω"
                    pred_proba = model.predict_proba(X_test.iloc[[customer_index]])[0, 1]
                    pred_class = model.predict(X_test.iloc[[customer_index]])[0]
                    st.metric("–†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:", actual_status)
                    st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞:", f"{pred_proba:.2%}")
                    st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:", "–û—Ç—Ç–æ–∫" if pred_class == 1 else "–õ–æ—è–ª–µ–Ω")


                st.subheader("–í–∫–ª–∞–¥ –§–∞–∫—Ç–æ—Ä–æ–≤ –≤ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (SHAP Waterfall Plot)")
                st.markdown("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –≤–∫–ª–∞–¥ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (`E[f(X)]`) –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ (`f(x)`) –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")

                try:
                    explanation = shap.Explanation(
                        values=shap_values[customer_index,:],
                        base_values=base_value,
                        data=X_test.iloc[customer_index,:].values,
                        feature_names=X_test.columns.tolist()
                    )

                    fig_waterfall, ax_waterfall = plt.subplots()
                    shap.waterfall_plot(explanation, max_display=15, show=False)
                    st.pyplot(fig_waterfall, bbox_inches='tight')
                    plt.close(fig_waterfall)

                    st.caption("""
                        *   **E[f(X)] ({:.3f}):** –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ª–æ–≥–∞—Ä–∏—Ñ–º —à–∞–Ω—Å–æ–≤ –æ—Ç—Ç–æ–∫–∞).
                        *   **–ö—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–µ–ª–∫–∏:** –§–∞–∫—Ç–æ—Ä—ã/–ø—Ä–∏–∑–Ω–∞–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞.
                        *   **–°–∏–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏:** –§–∞–∫—Ç–æ—Ä—ã/–ø—Ä–∏–∑–Ω–∞–∫–∏, —É–º–µ–Ω—å—à–∞—é—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞.
                        *   **f(x) ({:.3f}):** –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ª–æ–≥–∞—Ä–∏—Ñ–º —à–∞–Ω—Å–æ–≤) –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
                    """.format(base_value, explanation.values.sum() + base_value))

                except Exception as e:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Waterfall Plot: {e}")


                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–∫–ª–∞–¥–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
                    shap_df = pd.DataFrame({
                        '–ü—Ä–∏–∑–Ω–∞–∫': X_test.columns,
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': X_test.iloc[customer_index].values,
                        'SHAP Value': shap_values[customer_index,:]
                    })
                    st.dataframe(shap_df.sort_values(by='SHAP Value', key=abs, ascending=False))

            else:
                 st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–ª–∏–µ–Ω—Ç–∞.")
        else:
            missing = []
            if shap_values is None: missing.append("–∑–Ω–∞—á–µ–Ω–∏—è SHAP")
            if base_value is None: missing.append("–±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            if X_test.empty: missing.append("—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (X_test)")
            if y_test is None: missing.append("—Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏ (y_test)")
            if explainer is None: missing.append("SHAP explainer")
            st.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}.")

    with tab4:
        st.header("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ò—Å—Ö–æ–¥–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö")

        if df_original is not None:
            st.markdown("–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.")

            feature_to_plot = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
                df_original.columns.drop('Exited', errors='ignore'),
                index=df_original.columns.get_loc('Age') if 'Age' in df_original.columns else 0
            )

            if feature_to_plot:
                col_eda1, col_eda2 = st.columns([1, 1])

                with col_eda1:
                     st.write(f"**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ '{feature_to_plot}'**")
                     if pd.api.types.is_numeric_dtype(df_original[feature_to_plot]) and df_original[feature_to_plot].nunique() > 15:
                         fig_eda = px.histogram(df_original, x=feature_to_plot, marginal="box", title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {feature_to_plot}")
                     else:
                         fig_eda = px.bar(df_original[feature_to_plot].value_counts().reset_index(),
                                         x=feature_to_plot, y='count', title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {feature_to_plot}",
                                         text_auto=True)
                         fig_eda.update_layout(xaxis={'categoryorder':'total descending'})
                     st.plotly_chart(fig_eda, use_container_width=True)

                with col_eda2:
                    if 'Exited' in df_original.columns:
                        st.write(f"**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ '{feature_to_plot}' –≤ —Ä–∞–∑—Ä–µ–∑–µ –æ—Ç—Ç–æ–∫–∞ ('Exited')**")
                        if pd.api.types.is_numeric_dtype(df_original[feature_to_plot]) and df_original[feature_to_plot].nunique() > 15:
                             fig_eda_churn = px.histogram(df_original, x=feature_to_plot, color='Exited',
                                                        marginal="box", barmode='overlay', opacity=0.7,
                                                        title=f"{feature_to_plot} –ø–æ –°—Ç–∞—Ç—É—Å—É –û—Ç—Ç–æ–∫–∞")
                        else:
                              df_grouped = df_original.groupby([feature_to_plot, 'Exited']).size().reset_index(name='count')
                              fig_eda_churn = px.bar(df_grouped, x=feature_to_plot, y='count', color='Exited',
                                                    barmode='group', title=f"{feature_to_plot} –ø–æ –°—Ç–∞—Ç—É—Å—É –û—Ç—Ç–æ–∫–∞",
                                                    text_auto=True)
                              fig_eda_churn.update_layout(xaxis={'categoryorder':'total descending'})

                        st.plotly_chart(fig_eda_churn, use_container_width=True)
                    else:
                        st.info("–ö–æ–ª–æ–Ω–∫–∞ 'Exited' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–∑—Ä–µ–∑–µ –æ—Ç—Ç–æ–∫–∞.")

        else:
            st.warning("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å EDA.")

else:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–æ–¥–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")

st.sidebar.title("–û –ü—Ä–æ–µ–∫—Ç–µ")
st.sidebar.info(
    """
    **–î–µ—à–±–æ—Ä–¥ –¥–ª—è –ê–Ω–∞–ª–∏–∑–∞ –û—Ç—Ç–æ–∫–∞ –ö–ª–∏–µ–Ω—Ç–æ–≤**

    **–¶–µ–ª—å:** –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (LightGBM), –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—â–µ–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∏ –ø–æ–Ω—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –Ω–µ–≥–æ.

    **–î–∞–Ω–Ω—ã–µ:** –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞.
    **–ú–æ–¥–µ–ª—å:** LightGBM, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é Optuna.
    **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** SHAP (SHapley Additive exPlanations).

    **–í–∫–ª–∞–¥–∫–∏:**
    - **–û–±–∑–æ—Ä –ú–æ–¥–µ–ª–∏:** –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
    - **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ü–µ–ª–æ–º.
    - **–ê–Ω–∞–ª–∏–∑ –ö–ª–∏–µ–Ω—Ç–∞:** –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    - **EDA:** –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
)